#include <Arduino.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_FreeTouch.h>

#define SCREEN_WIDTH 128  // OLED display width, in pixels
#define SCREEN_HEIGHT 64  // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library.
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET -1        // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3D  ///< See datasheet for Address; 0x3D for 128x64, 0x3C for 128x32
Adafruit_SSD1306 screen(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Stickman Sprites
// 'StickmanRunning0', 24x32px
const unsigned char myBitmapStickmanRunning0[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x20, 0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00,
  0x01, 0x10, 0x00, 0x02, 0x28, 0x00, 0x04, 0x28, 0x00, 0x00, 0x46, 0x00, 0x00, 0x41, 0x80, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x01, 0xc0, 0x00, 0x02, 0x20, 0x00, 0x0c, 0x10, 0x00, 0xf0, 0x10,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00
};
// 'StickmanRunning0_Punch1', 24x32px
const unsigned char myBitmapStickmanRunning0_Punch1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x20, 0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00,
  0x00, 0x50, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x68, 0x00, 0x00, 0x67, 0x80, 0x00, 0x50, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x01, 0xc0, 0x00, 0x02, 0x20, 0x00, 0x0c, 0x10, 0x00, 0xf0, 0x10,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00
};
// 'StickmanRunning0_Punch2', 24x32px
const unsigned char myBitmapStickmanRunning0_Punch2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x20, 0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x1f, 0xfc,
  0x00, 0x10, 0x00, 0x00, 0x28, 0x40, 0x00, 0x29, 0x80, 0x00, 0x46, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x01, 0xc0, 0x00, 0x02, 0x20, 0x00, 0x0c, 0x10, 0x00, 0xf0, 0x10,
  0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x08, 0x00
};
// 'StickmanRunning1', 24x32px
const unsigned char myBitmapStickmanRunning1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00, 0x01, 0x10, 0x00,
  0x02, 0x28, 0x00, 0x04, 0x28, 0x00, 0x00, 0x46, 0x00, 0x00, 0x41, 0x80, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x20, 0x00, 0x02, 0x20,
  0x00, 0x3c, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00
};
// 'StickmanRunning1_Punch2', 24x32px
const unsigned char myBitmapStickmanRunning1_Punch2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x1f, 0xfc, 0x00, 0x10, 0x00,
  0x00, 0x28, 0x40, 0x00, 0x29, 0x80, 0x00, 0x46, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x20, 0x00, 0x02, 0x20,
  0x00, 0x3c, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00
};
// 'StickmanRunning2', 24x32px
const unsigned char myBitmapStickmanRunning2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00, 0x01, 0x10, 0x00,
  0x02, 0x28, 0x00, 0x04, 0x28, 0x00, 0x00, 0x46, 0x00, 0x00, 0x41, 0x80, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x90,
  0x00, 0x00, 0xa0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x80, 0x00
};
// 'StickmanRunning2_Punch1', 24x32px
const unsigned char myBitmapStickmanRunning2_Punch1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00, 0x00, 0x50, 0x00,
  0x00, 0xa8, 0x00, 0x00, 0x68, 0x00, 0x00, 0x67, 0x80, 0x00, 0x50, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x90,
  0x00, 0x00, 0xa0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x80, 0x00
};
// 'StickmanRunning1_Punch1', 24x32px
const unsigned char myBitmapStickmanRunning1_Punch1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00, 0x00, 0x50, 0x00,
  0x00, 0xa8, 0x00, 0x00, 0x68, 0x00, 0x00, 0x67, 0x80, 0x00, 0x50, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x20, 0x00, 0x02, 0x20,
  0x00, 0x3c, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00
};
// 'StickmanRunning2_Punch2', 24x32px
const unsigned char myBitmapStickmanRunning2_Punch2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x1f, 0xfc, 0x00, 0x10, 0x00,
  0x00, 0x28, 0x40, 0x00, 0x29, 0x80, 0x00, 0x46, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x90,
  0x00, 0x00, 0xa0, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x80, 0x00, 0x01, 0x80, 0x00, 0x00, 0x80, 0x00
};
// 'StickmanRunning3', 24x32px
const unsigned char myBitmapStickmanRunning3[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00, 0x01, 0x10, 0x00,
  0x02, 0x28, 0x00, 0x04, 0x28, 0x00, 0x00, 0x46, 0x00, 0x00, 0x41, 0x80, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x10, 0x00, 0x01, 0x10, 0x00, 0x01, 0x10,
  0x00, 0x02, 0x20, 0x00, 0x02, 0x40, 0x00, 0x02, 0x80, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00
};
// 'StickmanRunning3_Punch1', 24x32px
const unsigned char myBitmapStickmanRunning3_Punch1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00, 0x00, 0x50, 0x00,
  0x00, 0xa8, 0x00, 0x00, 0x68, 0x00, 0x00, 0x67, 0x80, 0x00, 0x50, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x10, 0x00, 0x01, 0x10, 0x00, 0x01, 0x10,
  0x00, 0x02, 0x20, 0x00, 0x02, 0x40, 0x00, 0x02, 0x80, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00
};
// 'StickmanRunning3_Punch2', 24x32px
const unsigned char myBitmapStickmanRunning3_Punch2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x1f, 0xfc, 0x00, 0x10, 0x00,
  0x00, 0x28, 0x40, 0x00, 0x29, 0x80, 0x00, 0x46, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x10, 0x00, 0x01, 0x10, 0x00, 0x01, 0x10,
  0x00, 0x02, 0x20, 0x00, 0x02, 0x40, 0x00, 0x02, 0x80, 0x00, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00
};
// 'StickmanRunning4', 24x32px
const unsigned char myBitmapStickmanRunning4[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x20, 0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0xf0, 0x00,
  0x01, 0x10, 0x00, 0x02, 0x28, 0x00, 0x04, 0x28, 0x00, 0x00, 0x46, 0x00, 0x00, 0x41, 0x80, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x10, 0x00, 0x02, 0x08,
  0x00, 0x02, 0x08, 0x00, 0x02, 0x08, 0x00, 0x04, 0x10, 0x00, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00
};
// 'StickmanRunning4_Punch1', 24x32px
const unsigned char myBitmapStickmanRunning4_Punch1[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x20, 0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x00,
  0x00, 0x50, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x68, 0x00, 0x00, 0x67, 0x80, 0x00, 0x50, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x10, 0x00, 0x02, 0x08,
  0x00, 0x02, 0x08, 0x00, 0x02, 0x08, 0x00, 0x04, 0x10, 0x00, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00
};
// 'StickmanRunning4_Punch2', 24x32px
const unsigned char myBitmapStickmanRunning4_Punch2[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x11, 0x00, 0x00, 0x20, 0x80, 0x00, 0x20,
  0x80, 0x00, 0x20, 0x80, 0x00, 0x11, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x08, 0x0c, 0x00, 0x1f, 0xfc,
  0x00, 0x10, 0x00, 0x00, 0x28, 0x40, 0x00, 0x29, 0x80, 0x00, 0x46, 0x00, 0x00, 0x40, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x80, 0x00, 0x01, 0x40, 0x00, 0x01, 0x20, 0x00, 0x01, 0x10, 0x00, 0x02, 0x08,
  0x00, 0x02, 0x08, 0x00, 0x02, 0x08, 0x00, 0x04, 0x10, 0x00, 0x08, 0x10, 0x00, 0x10, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1680)
const int myBitmapallArray_LEN = 15;
const unsigned char* myBitmapallArray[15] = {
  myBitmapStickmanRunning0,
  myBitmapStickmanRunning0_Punch1,
  myBitmapStickmanRunning0_Punch2,
  myBitmapStickmanRunning1,
  myBitmapStickmanRunning1_Punch1,
  myBitmapStickmanRunning1_Punch2,
  myBitmapStickmanRunning2,
  myBitmapStickmanRunning2_Punch1,
  myBitmapStickmanRunning2_Punch2,
  myBitmapStickmanRunning3,
  myBitmapStickmanRunning3_Punch1,
  myBitmapStickmanRunning3_Punch2,
  myBitmapStickmanRunning4,
  myBitmapStickmanRunning4_Punch1,
  myBitmapStickmanRunning4_Punch2
};

// ** MODIFY THIS CODE ** 
// 'Obstacle', 16x21px
int obstacle1Height = 24; // height in pixels
int obstacle1Width = 16;  // width in pixels
// 'Obstacle', 16x24px
const unsigned char obstacle[] PROGMEM = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x10, 0x20, 0x20, 0x10, 0x3f, 0x08, 0x40, 0x88,
  0x80, 0x48, 0x80, 0x4e, 0x80, 0x49, 0x40, 0x89, 0x7f, 0x09, 0x40, 0x09, 0x40, 0x09, 0x40, 0x09,
  0x40, 0x09, 0x40, 0x09, 0x40, 0x09, 0x40, 0x0e, 0x47, 0x88, 0x44, 0x88, 0x44, 0x88, 0x38, 0x70
};


//This is the following information:
// - times (in ms) that obstacles should spawn
// - on-screen x locations
// - Whether to show obstacle or not (defeated)
signed long obstacle1Data[10][3] = {
  { 1000, 128, 1 },
  { 1700, 128, 1 },
  { 3300, 128, 1 },
  { 4800, 128, 1 },
  { 5500, 128, 1 },
  { 7200, 128, 1 },
  { 8000, 128, 1 },
  { 8700, 128, 1 },
  { 10000, 128, 1 },
  { 10600, 128, 1 }
};

// Done all the array and bitmap stuff ------------------------------------------------

//the game state
enum gameState {
  START,
  GAME,
  END
};
gameState state = START;

unsigned long gameEndTime = 15000; 

//animation variables
unsigned int animationToDisplay = 0;  //The index in the list of animations to use rn
unsigned long changeAnimationTime = 0;
int msBetweenRunningAnimation = 75;

//game score
int score = 0;

//state of the stickman for the punching
enum stickmanState {
  running,
  punching1,
  punching2,
  punching3,
  jumping
};
stickmanState stateOfAlice = running;


//button variables
Adafruit_FreeTouch punchButton = Adafruit_FreeTouch(A0, OVERSAMPLE_4, RESISTOR_50K, FREQ_MODE_NONE);
unsigned long punchButtonLastPressed = 0;
int punchButtonCooldown = 300;   //The time between cooldowns (to avoid doubling signall)
int punchButtonThreshold = 600;  //The minimum value to register a "press"



void animateStickman() {
  int offset = 3;
  switch (stateOfAlice) {
    case running:
      offset = 3;  // Just in case it didn't get set back to 3 at some point
      break;
    case punching1:
      offset = 4;                //Next walking state (3) + 1 punching state since we have to start punching
      stateOfAlice = punching2;  //Make sure we're in the next state the next time we have to change animations
      break;
    case punching2:
      offset = 4;                //Next walking state (3) + 1 punching state since we have to start punching
      stateOfAlice = punching3;  //Make sure we're in the next state the next time we have to change animations
      break;
    case punching3:
      offset = 1;              //Just need to more forward to 1 since the next sprite comes directly after the second punch sprite
      stateOfAlice = running;  //Make sure we're in the next state the next time we have to change animations
      break;
    case jumping:

      break;
  }
  animationToDisplay = (animationToDisplay + offset) % 15;  //Increment it by 1 but keep it constrianed to 0-3
  screen.drawBitmap(1, 33, myBitmapallArray[animationToDisplay], 24, 32, WHITE);
}

void animateObstacles() {
  for (int i = 0; i < 10; i++) {
    //Loop through all the obstacles
    // Serial.print("Time: ");
    // Serial.print(obstacle1Data[i][0]);
    // Serial.print(" X: ");
    // Serial.print(obstacle1Data[i][1]);
    // Serial.print(" Alive: ");
    // Serial.print(obstacle1Data[i][2]);
    if (millis() >= obstacle1Data[i][0] && obstacle1Data[i][1] >= -50 && obstacle1Data[i][2] == 1) {
      //If:
      // - it is past time for them to start moving
      // - they're on the screen
      // - they're alive
      obstacle1Data[i][1] = obstacle1Data[i][1] - 3;
      screen.drawBitmap(obstacle1Data[i][1], 40, obstacle, 16, 24, WHITE);
    }   
  }
}

// Function to test if button has been pressed
bool punchButtonPressed() {
  unsigned long currentTime = millis();
  if (punchButton.measure() >= punchButtonThreshold && currentTime - punchButtonLastPressed >= punchButtonCooldown) {
    punchButtonLastPressed = currentTime;
    score -= 10;  //subtract score for punching so you can't just spam it
    //Serial.println("We're punching");
    return true;
  } else {
    return false;
  }
}

// Function that checks if an obstacle is being punched
void defeatObstacles() {
  if (stateOfAlice == punching1 || stateOfAlice == punching2) {  //If we are currently punching
    for (int i = 0; i < 10; i++) {
      //Loop through all the obstacles
      if (obstacle1Data[i][1] >= 19 && obstacle1Data[i][1] <= 26 && obstacle1Data[i][2] == 1) {
        Serial.println("We're in the if-statement");
        //If alice can reach them with her fist & they're alive
        obstacle1Data[i][2] = 0;  //Defeat them
        score += 100;             //Add 100 to the score
      }
    }
  }
}

// Function that checks if obstacle is touching Stickman and is not destroyed
void losePoints() {
  for (int i = 0; i < 10; i++) {
    //Loop through all the obstacles
    if (obstacle1Data[i][1] < 19 && obstacle1Data[i][2] == 1) {
      //If the obstacle got past alice
      obstacle1Data[i][2] = 0;  //Defeat them so we don't keep losing points
      score -= 150;             //Add 100 to the score
    }
  }
}

// Shows score
void showScore() {
  screen.setCursor(0, 0);
  screen.setTextSize(1);
  screen.print(F("Score: "));
  screen.print(score);
}

// Starting Text
void showStartText() {
  screen.setCursor(7, 0);
  screen.setTextSize(1);
  screen.print(F("--Defender Donna--"));
  screen.setCursor(0, 15);
  screen.setTextSize(1);
  screen.print(F("Help Donna fend off swarms of enimies!"));
}

// Ending text
void showEndText() {
  screen.setCursor(7, 0);
  screen.setTextSize(1);
  screen.print(F("--Defender Donna--"));
  screen.setCursor(0, 15);
  screen.print(F("Your score: "));
  screen.print(score);
  screen.setCursor(0, 30);
  screen.print(F("Play again?"));
}

// Resets data for new game
void resetForNewGame() {
  unsigned long currentTime = millis();
  unsigned long totalRandom = currentTime + 500 + rand() % 1000;

  for (int i = 0; i < 10; i++) {
    //Loop through all the obstacles
    obstacle1Data[i][0] = totalRandom;  //offset all the spawn times by the current millis value
    obstacle1Data[i][1] = 128;
    obstacle1Data[i][2] = 1;
    totalRandom += 500 + rand() % 1000;
  }
  gameEndTime = obstacle1Data[9][0] + 5000;
  changeAnimationTime = millis() + msBetweenRunningAnimation;
  score = 0;
}



void setup(void) {
  Serial.begin(9600);
  screen.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3c
  screen.setTextColor(SSD1306_WHITE);
  screen.clearDisplay();  //Clearing the buffer so we start off with a blank screen
  screen.display();       //sending the buffer to the screen to actually display it

  if (!punchButton.begin())
    Serial.println("Failed to begin qt on pin A0");
}

void loop(void) {
  switch (state) {
    case START:
      // Run start protocol
      // Check if gamer is starting game
      if (punchButton.measure() >= punchButtonThreshold) {
        punchButtonLastPressed = millis();  //"Debouncing" the button
        resetForNewGame();
        //Serial.println("Switching to the game");
        state = GAME;
      }
      if (millis() >= changeAnimationTime) {
        changeAnimationTime += msBetweenRunningAnimation;
        screen.clearDisplay();  //Clearing the buffer so we start off with a blank screen
        animateStickman();
        showStartText();
        screen.display();  //sending the buffer to the screen to actually display it
      }
      break;
    case GAME:  // Game code ---------
      //Check if we should start punching
      if (punchButtonPressed() && stateOfAlice == running) {
        stateOfAlice = punching1;
      }

      //Check if us punching is defeating any of the obstacles
      defeatObstacles();

      //Check if any of the obstacles got past us and we need to lose points
      losePoints();

      //Deal with all the animations
      if (millis() >= changeAnimationTime) {
        changeAnimationTime += msBetweenRunningAnimation;
        screen.clearDisplay();  //Clearing the buffer so we start off with a blank screen
        showScore();            //Show the score in the top left
        animateObstacles();
        animateStickman();
        screen.display();  //sending the buffer to the screen to actually display it
      }
      if (millis() >= gameEndTime) {
        //If the game is over
        state = END;
      }
      break;  // End of game code ----------
    case END:
      screen.clearDisplay();
      showEndText();
      screen.display();
      if (punchButton.measure() >= punchButtonThreshold) {
        punchButtonLastPressed = millis();  //"Debouncing" the button
        resetForNewGame();
        state = GAME;
      }
      break;
  }
}
